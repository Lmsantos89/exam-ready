import { useState } from 'react';

interface AIQuestionGeneratorProps {
  examType: string;
  onQuestionGenerated: (question: any) => void;
}

export default function AIQuestionGenerator({ examType, onQuestionGenerated }: AIQuestionGeneratorProps) {
  const [isGenerating, setIsGenerating] = useState(false);
  const [topic, setTopic] = useState('');
  const [difficulty, setDifficulty] = useState('intermediate');
  
  // This would be replaced with an actual API call to Amazon Bedrock in production
  const generateQuestion = async () => {
    setIsGenerating(true);
    
    try {
      // Simulate API call delay
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      // Mock response - in production this would come from Amazon Bedrock
      const mockQuestion = {
        id: Math.floor(Math.random() * 1000),
        text: `Sample ${examType} question about ${topic || 'general concepts'} at ${difficulty} level`,
        options: [
          { id: 'a', text: 'First option' },
          { id: 'b', text: 'Second option' },
          { id: 'c', text: 'Third option' },
          { id: 'd', text: 'Fourth option' }
        ],
        correctAnswer: 'b',
        explanation: 'This is a sample explanation for the generated question. In a real implementation, this would be generated by the AI model.'
      };
      
      onQuestionGenerated(mockQuestion);
    } catch (error) {
      console.error('Error generating question:', error);
    } finally {
      setIsGenerating(false);
    }
  };
  
  return (
    <div className="bg-white p-6 rounded-lg shadow">
      <h2 className="text-xl font-semibold mb-4">Generate AI Question</h2>
      
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Topic (optional)
        </label>
        <input
          type="text"
          value={topic}
          onChange={(e) => setTopic(e.target.value)}
          placeholder="e.g., Networking, Security, Storage"
          className="w-full p-2 border rounded"
        />
      </div>
      
      <div className="mb-6">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Difficulty
        </label>
        <select
          value={difficulty}
          onChange={(e) => setDifficulty(e.target.value)}
          className="w-full p-2 border rounded"
        >
          <option value="beginner">Beginner</option>
          <option value="intermediate">Intermediate</option>
          <option value="advanced">Advanced</option>
        </select>
      </div>
      
      <button
        onClick={generateQuestion}
        disabled={isGenerating}
        className={`w-full py-2 px-4 rounded font-medium ${
          isGenerating
            ? 'bg-gray-300 cursor-not-allowed'
            : 'bg-blue-600 hover:bg-blue-700 text-white'
        }`}
      >
        {isGenerating ? 'Generating...' : 'Generate Question'}
      </button>
    </div>
  );
}